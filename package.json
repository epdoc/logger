{
    "name": "logger",
    "version": "1.4.6",
    "private": true,
    "dependencies": {},
    "readme": "# Logger #\n\nJim's Logger module. Includes support for formatted logging to\n\n* console (default)\n* file (specify path) - logs as a JSON array\n* [SOS Max](http://www.sos.powerflasher.com/developer-tools/sosmax/home/) - _SOS max is the POWERFLASHER Socket Output Server - a fast and helpful programmer tool with graphical\nuser interface to display log messages for debugging purpose._\n\nOn startup the logger is set to the console transport.\nIf a file or SOS logger is closed logging will revert to the previously specified logger.\nThus if you specify an SOS logger and the SOS application is closed, logging will return back to the console.\n\n## Setting the Logger Transport ##\n\nTransports are maintained in a stack. You push a transport using ```setLogger``` and pop a transport\nusing ```popLogger```. If a transport closes (_e.g._ SOS Max is closed) the stack is\nautomatically popped. Logger buffers messages while switching transports, however individual\ntransports can do their own buffering (_e.g._ file). If a transport closes prematurely, it's buffer\nmay be lost.\n\nThere are probably few where you would need to manually call ```popLogger```.\n\nThe ```setLogger``` method takes an object with these properties:\n\n * type - Must be one of 'console', 'file' or 'sos'\n * path - 'path/to/myfile.log', used when type is file\n * dateFormat - one of 'ISO' or 'formatMS', default is dependent on the transport but is usually 'formatMS'\n * bIncludeSessionId - Indicates whether the sessionId should be included in the output, defaults to true\n\n### Logging to a File ###\n\n```javascript\nvar Logger = require('logger');\nvar log = Logger.get('MyModule');\nLogger.setLogger( { type: 'file', path: 'path/to/myfile.log' } );\n\nlog.info(\"Return value for %s is %s\", \"hello\", \"world\" );\nlog.data('req',{a:3}).info();\nlog.data('res',{b:4}).info(\"My message with %s support\", 'formatting');\n```\n\nLog output to a file is a JSON-formatted array with [ date, level, sid, module, message, data ], as defined\nunder the LogMessage function (below).\n\n### Logging to SOS ###\n\nWhen you set the logger to SOS the setLogger method returns immediately, but the socket takes awhile to\ninitialize. In the meantime log messages are queued up and getLogger() returns the SOS logger. Once the\nconnection is made the messages are flushed. If the connection is refused the messages are flushed to the\npreviously set logger output (usually the console).\n\n```javascript\nvar Logger = require('logger');\nvar log = Logger.get('MyModule');\nLogger.setLogger( { type: 'sos', bIncludeSessionId: false } );\n\nlog.info(\"Return value for %s is %s\", \"hello\", \"world\" );\n```\n\n## How to Log Messages ##\n\nLogging is done by one of these methods:\n\n1. Directly calling the Logger's logMessage function\n2. Using Logger.get() to create a logging object and calling methods on that object (as shown in above examples)\n3. Creating your own logging object that exposes it's own methods, then use this object to call logMethod\n\nIf you are creating your own logging object, use Logger's logging object as an example. You can also find\nan example in the Armor5 Admin Console where a middleware module extends the express.js response object\nwith logging methods.\n\n### The logMessage Function ##\n\nThe logMessage function gives you a direct API into the queue of logging messages that are to be output.\nThis function is used by the Logging Object (next section) and by your custom logging objects.\n\n```javascript\nvar Logger = require('logger');\nLogger.setLogger( { type: 'sos', bIncludeSessionId: true } );\nLogger.setGlobalLogLevel( 'info' );\nLogger.logMessage( {\n        level: 'info',\n        sid: '123',\n        module: 'api.org.create',\n        message: \"My formatted message\"\n        });\n```\n\nThe logMessage function takes an object with the following parameters:\n\n * level - Must be one of LEVEL_ORDER values, all lower case\n * sid - (Optional) sessionID to display\n * module - (Optional) Module descriptor to display (usually of form route.obj.function)\n * time - (Optional) A date object with the current time, will be filled in if not provided\n * timeDiff - (Optional) The difference in milliseconds between 'time' and when the application was\nstarted, based on reading Logger.getStartTime()\n * message - A string or an array of strings. If an array the string will be printed on multiple lines\nwhere supported (e.g. SOS). The string must already formatted (e.g.. no '%s')\n* data - Any object, will be serialized as JSON\n\n\n### Logging using Logger's Logging Object ###\n\nThe logger module includes a handy logging object that you can initialize in a file for logging from that file.\n\nYou create a new logging object using the Logger's ```get``` method.\n\n```javascript\nvar log = require('logger').get('MyModuleName');\n\nlog.info(\"Return value for %s is %s\", \"hello\", \"world\" );\n\nlog.log('info',[\"A multiline\",\"output\",[\"With formatted %drd line\",%d]]);\n\n// Output a message and a JSON-encoded object\nlog.data('key2',{type:'value2'}).info(\"My message\");\n\n// Output two objects with no accompanying message\nlog.data('key1',{type:'value1'}).data('key2',{type:'value2'}).debug();\n\n```\n\nThe string \"MyModuleName\" above should usually be set to the name of your Javascript file, and will be output\nalong with the log level.\n\nThe logging object support chaining. Every method except isAboveLevel() will return the logging object.\n\nItems added with the data() method are flushed when logArgs is called.\nlogArgs is called for any of the methods info(), debug(), log(), etc.\n\n## Logging Commands ##\n\n```javascript\n\nvar Logger = require('logger');\n\n// Static methods\n\nvar log = Logger.get('MyModuleName');\nLogger.setLogger( { type: 'file', path: 'path/to/myfile.log', dateFormat: 'ISO', bIncludeSid: false } );\nvar loggerType = Logger.getLogger().type;        // One of file, console or sos\nLogger.setGlobalLogLevel( 'warn' );\nvar startTime = Logger.getStartTime();           // Milliseconds\n\n// Instance methods\n// The first six of these methods are shortcuts that call the log method\n\nlog.info( \"I just want to say %s to the %s\", \"Hello\", \"World\" );\nlog.debug( \"We %s formatted messages\", \"do\" );\nlog.error( \"Error: %s\", err );\nlog.verbose( \"The default is to not output verbose messages\" );\nlog.warn( \"Danger Will Robinson, danger\" );\nlog.fault( \"Restarting server in %d seconds\", 10 );\nlog.data('key1',{type:'value'}).info();\nlog.data('key2',{type:'value2'}).info(\"My message\");\n\nlog.date();             // Output now's date/time\nlog.separator();        // Output a line separator\n\nlog.log( 'info', \"This method %s supports formatting\", \"also\" );\n\n// Enable verbose messages to be output for this log object (overrides global setting)\nlog.setLogLevel( \"verbose\" );\n```\n",
    "readmeFilename": "README.md",
    "_id": "logger@1.4.5",
    "description": "Jim's Logger module. Includes support for formatted logging to",
    "dist": {
        "shasum": "b6624ca4a1a2368d58c0f4c889075d5bd59e3292"
    },
    "_from": "logger@git+ssh://git@bitbucket.org:armor5/logger.git#v1.4.5"
}
